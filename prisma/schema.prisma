// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// High school
model UserHighSch{
  id String @id @db.Uuid 
  email   String  @unique
  firstName String
  lastName String
  levelOfEducation String
  subjects UserSubjectHighSch[]
  exams UserExamHighSch[]
  favoriteCourses UserCourseHighSch[]
}

model CourseHighSch {
  id String @id @default(uuid()) @db.Uuid
  // id Int @id @default(autoincrement())
  name String
  duration Int
  description String
  pathways String?
  users UserCourseHighSch[]
}

model SubjectHighSch {
  id String @id @default(uuid()) @db.Uuid
  name String
  subjectScores SubjectScoreHighSch[]
  users UserSubjectHighSch[]
}

model SubjectScoreHighSch {
  id String @id @default(uuid()) @db.Uuid
  // id Int @id @default(autoincrement())
  score Float
  subject SubjectHighSch @relation(fields: [subjectId], references: [id])
  subjectId String @db.Uuid
  exam ExamHighSch @relation(fields: [examId], references: [id])
  examId String @db.Uuid
}

model ExamHighSch{
  id String @id @default(uuid()) @db.Uuid
  name String
  form  Int
  subjectScores SubjectScoreHighSch[]
  users UserExamHighSch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserExamHighSch{
  examId String @db.Uuid
  exam ExamHighSch @relation(fields: [examId], references: [id])
  userId String @db.Uuid
  user UserHighSch @relation(fields: [userId], references: [id])

  @@id([examId, userId])
}

model UserCourseHighSch {
  userId String @db.Uuid
  user UserHighSch @relation(fields: [userId], references: [id])
  courseId String @db.Uuid
  course CourseHighSch @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model UserSubjectHighSch {
  userId String @db.Uuid
  user UserHighSch @relation(fields: [userId], references: [id])
  subjectId String @db.Uuid
  subject SubjectHighSch @relation(fields: [subjectId], references: [id])

  @@id([userId, subjectId])
}

///////////////////////Primary school//////////////////////////////////
///////////////////////////////////////////////////////////////////////

model UserPrimary {
  id String @id @db.Uuid 
  // id Int @id @default(autoincrement())
  // id String @id @unique
  email   String  @unique
  firstName String
  lastName String
  levelOfEducation String
  subjects UserSubjectPrimary[]
  exams UserExamPrimary[]
  // favoriteCourses UserCourse[]
  favoriteSchool UserSchoolPrimary[]
}

model ExamPrimary {
  id String @id @default(uuid()) @db.Uuid
  // id Int @id @default(autoincrement())
  name String
  class Int?
  subjectScores SubjectScorePrimary[]
  users UserExamPrimary[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserExamPrimary {
  examId String @db.Uuid
  exam ExamPrimary @relation(fields: [examId], references: [id])
  userId String @db.Uuid
  user UserPrimary @relation(fields: [userId], references: [id])

  @@id([examId, userId])
}

model SchoolPrimary {
  id String @id @default(uuid()) @db.Uuid
  // id Int @id @default(autoincrement())
  name String
  level String
  type String
  county String?
  users UserSchoolPrimary[]
}

model UserSchoolPrimary {
  userId String @db.Uuid
  user UserPrimary @relation(fields: [userId], references: [id])
  schoolId String @db.Uuid
  school SchoolPrimary @relation(fields: [schoolId], references: [id])

  @@id([userId, schoolId])
}

model SubjectPrimary {
  id String @id @default(uuid()) @db.Uuid
  // id Int @id @default(autoincrement())
  name String
  subjectScores SubjectScorePrimary[]
  users UserSubjectPrimary[]
}

model SubjectScorePrimary {
  id String @id @default(uuid()) @db.Uuid
  // id Int @id @default(autoincrement())
  score Float
  subject SubjectPrimary @relation(fields: [subjectId], references: [id])
  subjectId String @db.Uuid
  exam ExamPrimary @relation(fields: [examId], references: [id])
  examId String @db.Uuid
}

model UserSubjectPrimary {
  userId String @db.Uuid
  user UserPrimary @relation(fields: [userId], references: [id])
  subjectId String @db.Uuid
  subject SubjectPrimary @relation(fields: [subjectId], references: [id])

  @@id([userId, subjectId])
}
